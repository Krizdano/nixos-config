#+TITLE: My Emacs config
#+AUTHOR: Krizdano
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el
#+auto_tangle: t
#+DESCRIPTION: My personal emacs configuration
#+STARTUP: overview

* Table of Contents :toc:
- [[#settings][Settings]]
  - [[#backup][Backup]]
  - [[#cleanup-ui][Cleanup UI]]
  - [[#sane-defaults][Sane defaults]]
  - [[#eldoc][Eldoc]]
  - [[#minibuffer-escape][Minibuffer Escape]]
  - [[#font-settings][Font settings]]
  - [[#line-numbers][Line numbers]]
  - [[#enable-melpa][Enable MELPA]]
  - [[#change-default-file-for-custom-set-variables][Change Default file for custom-set-variables]]
  - [[#speed-up-emacs][Speed up emacs]]
  - [[#whitespace][Whitespace]]
  - [[#zoom][Zoom]]
- [[#languages][Languages]]
  - [[#treesitter][Treesitter]]
  - [[#nix][nix]]
  - [[#lsp][Lsp]]
  - [[#markdown-mode][Markdown-mode]]
  - [[#lua-mode][Lua-mode]]
  - [[#company][Company]]
- [[#ediff][EDIFF]]
- [[#org-mode][Org-mode]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#enable-org-mode][Enable org-mode]]
  - [[#org-modern][Org-modern]]
  - [[#org-agenda][org-agenda]]
  - [[#org-capture][Org-capture]]
  - [[#extra-config][extra-config]]
- [[#dired][Dired]]
- [[#theme][Theme]]
  - [[#doom-theme][Doom-theme]]
  - [[#catppuccin-theme][catppuccin-theme]]
  - [[#modeline][Modeline]]
- [[#packages][Packages]]
  - [[#evil-mode][Evil mode]]
  - [[#general][General]]
  - [[#drag-stuff][Drag stuff]]
  - [[#undo-tree][Undo tree]]
  - [[#rainbow-mode][Rainbow-mode]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#eat][Eat]]
  - [[#vterm][Vterm]]
  - [[#direnv][Direnv]]
  - [[#perspective][Perspective]]
  - [[#pdf][PDF]]
  - [[#tldr][TLDR]]
  - [[#toc-org][TOC-org]]
  - [[#sideline][Sideline]]
  - [[#evil-mc][Evil-mc]]
  - [[#popper][Popper]]
  - [[#treemacs][treemacs]]
  - [[#sly][sly]]

* Settings
** Backup
Tell emacs to pull all the backups that it creates in ==emacs-backup== directory.

#+begin_src emacs-lisp
  (setq
   backup-directory-alist '((".*" . "~/.local/share/emacs-backup"))
   auto-save-file-name-transforms '((".*" "~/.local/share/emacs-backup" t)))
#+end_src

** Cleanup UI

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)   ;; disable startup screen
  (setq use-file-dialog nil)        ;; disable file dialog
  (setq use-dialog-box nil)         ;; disable dialog box
  (setq pop-up-windows nil)         ;; disable pop up windows
  (setq ring-bell-function 'ignore) ;; disable annoying bell sound
  (scroll-bar-mode 0)               ;; disable scrollbar
  (menu-bar-mode 0)                 ;; disable menubar
  (tool-bar-mode 0)                 ;; disable toolbar
  (blink-cursor-mode 0)             ;; disable cursor blinking
#+end_src

** Sane defaults

#+begin_src emacs-lisp
  (electric-indent-mode -1)          ;; disable electric-indent
  (visual-line-mode -1)              ;; enables text wrapping
  (electric-pair-mode 1)             ;; enables autopairing
  (ido-mode 1)                       ;; enables ido mode
  (recentf-mode 1)                   ;; enables recent files
  (indent-tabs-mode 0)                ;; disable indent using tabs
  (setq use-package-always-ensure t) ;; don't have to specify ensure everytime using use-package
  ;; (setq use-package-verbose t)       ;; shows reports about loading and configuration details.
#+end_src

** Eldoc

#+begin_src emacs-lisp
  ;; disable showing eldoc in minibuffer
  (setq eldoc-display-functions '(eldoc-display-in-buffer))

  ;; to show information providied by eldoc in a pop-up window
  (use-package eldoc-box
    :ensure t
    :hook
    (eldoc-mode-hook . eldoc-box-hover-mode))
#+end_src

** Minibuffer Escape

#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Font settings

#+begin_src emacs-lisp
  ;; set font to SauceCodePro
  (set-frame-font "SauceCodePro Nerd Font 14")

  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
  ;;This set default font for emacsclient
  (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font-14"))
#+end_src

** Line numbers

#+begin_src emacs-lisp
  ;; only show numbers in these modes
  (dolist (mode '(org-mode-hook
                  prog-mode-hook
                  text-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode))))

  ;; set relative numbers
  (setq display-line-numbers-type 'relative)

  ;;show column numbers in mode line
  (column-number-mode)
#+end_src

** Enable MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** Change Default file for custom-set-variables

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

** Speed up emacs

Change garbage-collection-threshold to reduce the interval garbage
collection is called

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1000 1000))
#+end_src

** Whitespace

enable whitespace mode only for tailing lines and tabs

#+begin_src emacs-lisp
  (setq
   whitespace-style '(face tabs tab-mark trailing)
   whitespace-display-mappings '(
                                 (tab-mark     ?\t    [?\u00BB   ?\t] [?\\ ?\t])))
  ;; (dolist (mode '(prog-mode-hook))
  ;;   (add-hook mode (lambda () (whitespace-mode 1))))

  (global-whitespace-mode 1)
#+end_src

** Zoom

keybindings for zooming
#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Languages
All the settings related to different languages
** Treesitter

#+begin_src emacs-lisp
  ;; define sources
  (setq treesit-language-source-alist
        '((rust "https://github.com/tree-sitter/tree-sitter-rust")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (nix "https://github.com/nix-community/tree-sitter-nix")))

  ;; remap modes to use tss mode
  (setq major-mode-remap-alist
        '(;(c-mode . c-ts-mode)
          (sh-mode . bash-ts-mode)
          (python-mode . python-ts-mode)))
#+end_src
*** rust

#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :ensure t
    :mode "\\.rs\\'")
#+end_src

*** c

#+begin_src emacs-lisp
  (use-package c-ts-mode
    :ensure t
    :mode "\\.c\\'")
#+end_src

*** yaml

#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :ensure t
    :mode "\\.yaml\\'")
#+end_src

** nix
Enable support for nix lang

#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src

** Lsp
*** eglot
user eglot as lsp
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook
    ((python-ts-mode . eglot-ensure)
     (c-ts-mode . eglot-ensure)
     (rust-ts-mode . eglot-ensure)
     (nix-ts-mode . eglot-ensure)))
#+end_src

** Markdown-mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")

#+end_src

** Lua-mode

#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :mode "\\.lua\\'")
#+end_src

** Company

Autocomplete for emacs

#+begin_src emacs-lisp
  (use-package company
    :after eglot
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    ;; (company-show-numbers t)
    (company-tooltip-align-annotations t)
    (global-company-mode t))

   (use-package company-box
     :ensure t
     :after company
     :hook (company-mode . company-box-mode))
#+end_src

* EDIFF

#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)

  (defun my-ediff-hook ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map "n" 'ediff-next-difference)
    (define-key ediff-mode-map "e" 'ediff-previous-difference))

  (add-hook 'ediff-mode-hook 'my-ediff-hook)
#+end_src

* Org-mode
** Org-auto-tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Enable org-mode

#+begin_src emacs-lisp
  ;; (org-mode)
  (use-package org
    :defer 0
    :config
    (setq org-list-allow-alphabetical t
          org-return-follows-link t ;; Tab key follow link
          org-fold-catch-invisible-edits 'show-and-error

          ;; set directories
          org-directory "~/Documents/Org"
          org-journal-dir "~/Documents/Org/journal/")
    (require 'org-tempo)
    (org-mode)
    )
#+end_src

** Org-modern

#+begin_src emacs-lisp
  ;; indent based on heading level
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-modern
    :hook
    (org-mode . org-modern-mode)
    :config
    (setq org-modern-star "replace"
          org-hide-emphasis-markers t
          org-modern-block-fringe nil
          org-modern-replace-stars "◉○◉○◉"
          org-modern-list '((?+ . "•") (?- . "•"))))
#+end_src


** org-agenda

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :commands org-agenda
    :config
    (setq  org-agenda-files (list "journal/todo.org")
           org-agenda-start-with-log-mode t
           org-log-done 'time
           org-log-into-drawer t
           org-todo-keywords
           '((sequence
              "TODO(t)"          ; day to day tasks
              "PROJECT(p)"       ; Personal projects
              "INPROGRESS(i)"    ; Tasks that are in progress
              "STUDIES(s)"       ; study related
              "|"                ; The pipe necessary to separate "active" states and "inactive" states
              "DONE(d)"          ; Task has been completed
              "CANCELLED(c)")))) ; Task has been cancelled

#+end_src

** Org-capture

#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :commands org-capture
    :config
    (setq org-capture-templates
          `(("t" "Tasks/Projects")
            ("tt" "TASK" entry (file+olp "journal/todo.org" "Inbox")
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
            ("tp" "PROJECTS" entry (file+olp "journal/todo.org" "Inbox")
             "* PROJECT %?\n %U\n %a\n %i" :empty-lines 1)
            ("ts" "STUDIES" entry (file+olp "journal/todo.org" "Inbox")
             "* STUDIES %?\n %U\n %a\n %i" :empty-lines 1)
            ("tr" "RESOURCES" item (file+olp "journal/resources.org" "Other Stuff")
             "- [[%^{link}][%^{description}]] - *%?*\n %i" :append t)
            ("td" "Cash" table-line (file+headline "journal/invoice.org" "Invoice")
             "| %U | %^{Category} | %^{Amount} | %^{Account} | %^{items} |" :kill-buffer t))))
#+end_src

** extra-config

#+begin_src emacs-lisp
  ;; disable autopairs for <s TAB
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

#+end_src

* Dired


#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    )

  ;; install dired open to open files in default applications
  (use-package dired-open
    :after dired
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-open-file
      "o" 'dired-open-xdg)
    (setq dired-open-extensions '(("gif" . "imv")
                                  ("jpg" . "imv")
                                  ("jpeg" . "imv")
                                  ("png" . "imv")
                                  ("mp4" . "mpv")
                                  ("mp3" . "mpv")
                                  ("mkv" . "mpv")
                                  ("pdf" . "firefox"))))
#+end_src

automatically refresh dired buffers when files get adde or deleted from the directory
you are browsing

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

* Theme
** Doom-theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;   ;; set default theme to load
    ;;   (load-theme 'doom-tokyo-night t)
    ;;   ;; Corrects (and improves) org-mode's native fontification.
    ;;   (doom-themes-org-config)
    )

#+end_src

** catppuccin-theme

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin t)
    )
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 30
          doom-modeline-bar-width 5
          doom-modeline-persp-name t
          doom-mode-line-persp-icon t))
#+end_src

* Packages
** Evil mode

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; for evil-collection
    (setq evil-want-vsplit-window-right t)
    (setq evil-want-split-window-below t)

    (evil-mode)

    ;; change q and wq to kill buffers instead of emacs
    (evil-ex-define-cmd "q" 'kill-current-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
    (defun save-and-kill-this-buffer()(interactive)(save-buffer)(kill-current-buffer))

    (evil-set-undo-system 'undo-tree)

    ;; default to insert mode on these buffers
    (evil-set-initial-state 'eat-mode 'insert)
    (evil-set-initial-state 'vterm-mode 'insert))


  (use-package evil-collection
    :after evil
    :config
    (defun my-hjkl-rotation (_mode mode-keymaps &rest _rest)
      (evil-collection-translate-key 'normal mode-keymaps
        "m" "h"
        "n" "j"
        "e" "k"
        "i" "l"
        ";" "p"
        "c" "x"
        "s" "d"
        "S" "D"
        "d" "c"
        "l" "u"
        "u" "i"))

    ;; called after evil-collection makes its keybindings
    (add-hook 'evil-collection-setup-hook #'my-hjkl-rotation)
    (setq evil-collection-mode-list '(dashboard dired vterm ibuffer agenda))
    (evil-collection-init))
    #+end_src

*** keybindings for colemak-dh
**** All modes

#+begin_src emacs-lisp
  (evil-define-key '(motion normal visual) 'global "n" 'evil-next-visual-line)
  (evil-define-key '(motion normal visual) 'global "e" 'evil-previous-visual-line)
  (evil-define-key '(normal motion visual) 'global "i" 'evil-forward-char)
  (evil-define-key '(motion normal visual) 'global "m" 'evil-backward-char)
  (evil-define-key '(motion normal) 'global "j" 'evil-yank)
  (evil-define-key '(motion normal) 'global "J" 'evil-yank-line)
  (evil-define-key '(motion normal) 'global ";" 'evil-paste-after)
  (evil-define-key '(motion normal) 'global ":" 'evil-paste-before)
  (evil-define-key '(motion normal visual) 'global "O" 'evil-ex)
  (evil-define-key '(motion normal) 'global "k" 'evil-search-next)
  (evil-define-key '(motion normal) 'global "K" 'evil-search-previous)
#+end_src

**** Normal-mode

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "U" 'evil-insert-line)
  (define-key evil-normal-state-map "u" 'evil-insert)
  (define-key evil-normal-state-map "y" 'evil-open-below)
  (define-key evil-normal-state-map "Y" 'evil-open-above)
  (define-key evil-normal-state-map "p" 'evil-replace)
  (define-key evil-normal-state-map "P" 'evil-enter-replace-state)
  (define-key evil-normal-state-map "c" 'evil-delete-char)
  (define-key evil-normal-state-map "C" 'evil-delete-backward-char)
  (define-key evil-normal-state-map "s" 'evil-delete)
  (define-key evil-normal-state-map "S" 'evil-delete-line)
  (define-key evil-normal-state-map "d" 'evil-change)
  (define-key evil-normal-state-map "D" 'evil-change-line)
  (define-key evil-normal-state-map "x" 'evil-toggle-fold)

  ;; undo
  (define-key evil-normal-state-map "l" 'evil-undo)
  (define-key evil-normal-state-map "\C-p" 'evil-redo)
#+end_src

**** Window management

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "M" 'evil-window-left)
  (define-key evil-normal-state-map "I" 'evil-window-right)
  (define-key evil-normal-state-map "N" 'evil-window-down)
  (define-key evil-normal-state-map "E" 'evil-window-up)
  (define-key evil-normal-state-map "H" 'evil-window-split)
  (define-key evil-normal-state-map "R" 'evil-window-vsplit)
#+end_src

**** Visual-mode

#+begin_src emacs-lisp
  (define-key evil-visual-state-map (kbd "l") 'evil-downcase)
  (define-key evil-visual-state-map (kbd "L") 'evil-upcase)
  (define-key evil-visual-state-map (kbd "u") 'evil-insert)
  (define-key evil-visual-state-map (kbd "u")  evil-inner-text-objects-map)
#+end_src

**** Comment or Uncomment

#+begin_src emacs-lisp
  (define-key evil-visual-state-map "gd" 'comment-or-uncomment-region)
  (define-key evil-normal-state-map "gd" 'comment-line)
#+end_src

**** Motion

#+begin_src emacs-lisp
  (define-key evil-motion-state-map "z" 'evil-backward-word-begin)
  (define-key evil-motion-state-map "Z" 'evil-backward-word-begin)
  (define-key evil-motion-state-map "f" 'evil-forward-word-end)
  (define-key evil-motion-state-map "F" 'evil-forward-word-end)
  (define-key evil-motion-state-map "t" 'evil-find-char)
  (define-key evil-motion-state-map "T" 'evil-find-char-backward)
#+end_src

**** operator-pending-state

#+begin_src emacs-lisp
  (define-key evil-operator-state-map "i" nil)
  (define-key evil-operator-state-map "u" evil-inner-text-objects-map)
#+end_src

**** Disable some key

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "z" nil)
  (define-key evil-normal-state-map "Z" nil)

  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer leader-key
      :prefix "SPC"
      :global-prefix "M-SPC")

    (leader-key
      :keymaps '(normal visual emacs)
      "." 'find-file
      "n" 'previous-buffer
      "e" 'next-buffer
      "u" 'ibuffer
      "l" 'undo-tree-visualize
      "f" 'eval-region
      "a" 'async-shell-command
      "q" 'evil-quit
      "w" 'kill-buffer
      "x" 'vterm
      "RET" 'evil-toggle-fold
      "p" 'recentf-open-files
      "m" 'eldoc-box-help-at-point
      "t" 'compile
      "s" '(lambda () (interactive) (dired "."))
      "i" '(lambda () (interactive) (load-file "~/.config/emacs/init.el"))
      "d" '(lambda () (interactive) (find-file "~/.config/nixconfig/config/emacs/config.org"))
      "k" '(lambda () (interactive) (find-file "~/Documents/Org/journal/index.org"))

      ;; org
      "y a" 'org-agenda
      "y d" 'org-capture

      ;;perspective config
      "; r" 'persp-switch
      "; e" 'persp-kill
      "1" '(lambda () (interactive) (persp-switch-by-number 1))
      "2" '(lambda () (interactive) (persp-switch-by-number 2))
      "3" '(lambda () (interactive) (persp-switch-by-number 3))
      "4" '(lambda () (interactive) (persp-switch-by-number 4))
      "5" '(lambda () (interactive) (persp-switch-by-number 5))
      "6" '(lambda () (interactive) (persp-switch-by-number 6))
      "SPC" 'execute-extended-command))


#+end_src

** Drag stuff

#+begin_src emacs-lisp
  (use-package drag-stuff
    :init
    (drag-stuff-global-mode)
    (drag-stuff-define-keys))
#+end_src

** Undo tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-autosave-history nil)
    (setq undo-tree-history-directory-alist '(("." . "~/.local/share/emacs-backup/undo"))))
#+end_src

** Rainbow-mode

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode
    :config
    (rainbow-mode)
    )
#+end_src

** Rainbow delimiters

Adding rainbow colouring to parantheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Eat

#+begin_src emacs-lisp
  (use-package eat
    :commands eat)
#+end_src

** Vterm

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm)
#+end_src

** Direnv

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (setq direnv-always-show-summary nil)
    (direnv-mode))
#+end_src

** Perspective

workspace for emacs

#+begin_src emacs-lisp
  (use-package perspective
    :custom
    ;;disable warning message for not setting persp-mode-prefix-key
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    (setq persp-state-default-file "~/.config/emacs/sessions"))

  ;;group buffers by persp-name in ibuffer
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+end_src

** PDF

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("j" . pdf-view-next-line-or-next-page)
                ("k" . pdf-view-previous-line-or-previous-page))
    :init
    (pdf-loader-install)
    :config (add-to-list 'revert-without-query ".pdf"))
#+end_src

** TLDR

#+begin_src emacs-lisp
  (use-package tldr
    :commands tldr)
#+end_src

** TOC-org

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org-mode . toc-org-mode))
#+end_src

** Sideline

#+begin_src emacs-lisp
  (use-package sideline
    :hook (eglot-managed-mode . sideline-mode))

  ;;shows errors like vs code using sideline
  (use-package sideline-flymake
    :after sideline)
  (setq sideline-backends-skip-current-line t
        sideline-order-left 'down
        sideline-order-right 'up
        sideline-format-left "%s   "
        sideline-format-right "   %s"
        sideline-priority 100
        sideline-display-backend-name t
        sideline-backends-right '((sideline-flymake)
                                  (sideline-blame . down)))

  ;; show git logs using sideline
  (use-package sideline-blame
    :after sideline)
#+end_src

** Evil-mc
#+begin_src emacs-lisp
  (use-package evil-mc)
#+end_src
** Popper

#+begin_src emacs-lisp
  (use-package popper
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src









** treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

** sly
#+begin_src emacs-lisp
  (use-package sly)
#+end_src
