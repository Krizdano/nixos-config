#+TITLE: My Emacs Config
#+AUTHOR: Krizdano
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el
#+auto_tangle: t
#+DESCRIPTION: My personal Emacs configuration
#+STARTUP: overview

* Table of Contents :toc:
- [[#settings][Settings]]
  - [[#backup][Backup]]
  - [[#change-default-file-for-custom-set-variables][Change Default File for Custom-Set-Variables]]
  - [[#cleanup-ui][Cleanup UI]]
  - [[#eldoc][Eldoc]]
  - [[#enable-melpa][Enable MELPA]]
  - [[#font-settings][Font settings]]
  - [[#line-numbers][Line numbers]]
  - [[#minibuffer-escape][Minibuffer Escape]]
  - [[#sane-defaults][Sane Defaults]]
  - [[#speed-up-emacs][Speed up Emacs]]
  - [[#whitespace][Whitespace]]
  - [[#zoom][Zoom]]
- [[#languages][Languages]]
  - [[#lua-mode][Lua-Mode]]
  - [[#markdown-mode][Markdown-Mode]]
  - [[#sml][SML]]
  - [[#lsp][LSP]]
  - [[#tree-sitter][Tree-Sitter]]
  - [[#company][Company]]
- [[#ediff][EDIFF]]
- [[#org-mode][Org-mode]]
  - [[#enable-org-mode][Enable Org-Mode]]
  - [[#org-agenda][Org-Agenda]]
  - [[#org-auto-tangle][Org-Auto-Tangle]]
  - [[#org-capture][Org-Capture]]
  - [[#org-modern][Org-Modern]]
  - [[#org-tempo][Org-Tempo]]
  - [[#org-todo][Org TODO]]
  - [[#extra-config][Extra-Config]]
- [[#dired][Dired]]
- [[#theme][Theme]]
  - [[#catppuccin-theme][Catppuccin-Theme]]
  - [[#doom-theme][Doom-Theme]]
  - [[#modeline][Modeline]]
- [[#packages][Packages]]
  - [[#direnv][Direnv]]
  - [[#drag-stuff][Drag Stuff]]
  - [[#eat][Eat]]
  - [[#evil-mc][Evil-Mc]]
  - [[#evil-mode][Evil Mode]]
  - [[#general][General]]
  - [[#indent-bars][Indent-bars]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#pdf][PDF]]
  - [[#perspective][Perspective]]
  - [[#popper][Popper]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-mode][Rainbow-Mode]]
  - [[#sideline][Sideline]]
  - [[#sly][SLY]]
  - [[#smex][Smex]]
  - [[#tldr][TLDR]]
  - [[#toc-org][TOC-Org]]
  - [[#treemacs][Treemacs]]
  - [[#undo-tree][Undo Tree]]
  - [[#vterm][Vterm]]

* Settings
** Backup
Instruct Emacs to store all the backups that it creates in the custom =~/.local/share/emacs-backup= directory.

#+begin_src emacs-lisp
  (setq
   backup-directory-alist '((".*" . "~/.local/share/emacs-backup"))
   auto-save-file-name-transforms '((".*" "~/.local/share/emacs-backup" t)))
#+end_src

** Change Default File for Custom-Set-Variables
Specify a custom file for =custom-set-variables= to keep the main config clean.

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

** Cleanup UI
Adjust UI settings to create a cleaner interface by disabling unnecessary elements.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)   ;; Disable startup screen
  (setq use-file-dialog nil)        ;; Disable file dialog
  (setq use-dialog-box nil)         ;; Disable dialog box
  (setq pop-up-windows nil)         ;; Disable pop up windows
  (setq ring-bell-function 'ignore) ;; Disable annoying bell sound
  (menu-bar-mode 0)                 ;; Disable menubar
  (when (bound-and-true-p
         tool-bar-mode)
    (tool-bar-mode 0))                 ;; Disable toolbar
  (blink-cursor-mode 0)             ;; Disable cursor blinking

  (when (bound-and-true-p
         scroll-bar-mode)
    (scroll-bar-mode 0))            ;; Disable scoll bar

#+end_src

** Eldoc
Configure Eldoc to display documentation in a separate window rather than the minibuffer.

#+begin_src emacs-lisp
  ;; disable showing eldoc in minibuffer
  (setq eldoc-display-functions '(eldoc-display-in-buffer))

  ;; to show information provided by eldoc in a pop-up window
  (use-package eldoc-box
    :hook
    (eldoc-mode-hook . eldoc-box-hover-mode))
#+end_src

** Enable MELPA

Add MELPA to the list of package archives for easier package management.
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** Font settings
Specify font preferences for Emacs.

#+begin_src emacs-lisp
  ;; Set default font
  (set-frame-font "Iosevka Nerd Font 14")

  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font for emacsclient
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font 14"))
#+end_src

** Line numbers
Configure line numbers to display in specific modes and set them to relative.

#+begin_src emacs-lisp
  ;; only show numbers in these modes
  (dolist (mode '(org-mode-hook
                  prog-mode-hook
                  text-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode))))

  ;; set relative numbers
  (setq display-line-numbers-type 'relative)

  ;; Show column numbers in the mode line.
  (column-number-mode)
#+end_src

** Minibuffer Escape
By default, Emacs requires you to press =ESC= three times to escape quit the minibuffer. This changes it to require only one press.

#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Sane Defaults
Set commonly preferred defaults for better usability.

#+begin_src emacs-lisp
  (electric-indent-mode -1)          ;; Disable electric-indent
  (global-visual-line-mode -1)       ;; Disables truncated lines
  (electric-pair-mode 1)             ;; Enables autopairing
  (ido-mode 1)                       ;; Enables ido mode
  (recentf-mode 1)                   ;; Enables recent files
  (setq-default indent-tabs-mode nil)        ;; Disable indent using tabs
  (setq use-package-always-ensure t) ;; No need to specify 'ensure' every time when using use-package.
  ;; (setq use-package-verbose t)    ;; Displays reports on loading and configuration details.
#+end_src

** Speed up Emacs
Increase garbage collection threshold for better performance.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1000 1000))
#+end_src

** Whitespace
Enable Whitespace mode to highlight trailing spaces and tabs.

#+begin_src emacs-lisp
  (setq
   whitespace-style '(face tabs tab-mark trailing)
   whitespace-display-mappings '(
                                 (tab-mark     ?\t    [?\u00BB   ?\t] [?\\ ?\t])))

  (global-whitespace-mode 1) ;; Enable Whitespace mode globally
  (add-hook 'dired-mode-hook
            (lambda () (setq-local whitespace-style nil))) ;; Disable whitespace mode on dired
#+end_src

** Zoom
Define keybindings for zooming in and out of text. You can use =CTRL= plus +/- for zooming in/out.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Languages
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA),
IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript,
Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL. Other languages will require you to install additional modes.

** Lua-Mode
Enable Lua mode.

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'")
#+end_src

** Markdown-Mode
Enable Markdown mode.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'")

#+end_src
** SML
Enable SML mode

#+begin_src emacs-lisp
  (use-package sml-mode)
#+end_src

** LSP
*** Eglot
[[https://github.com/joaotavora/eglot][Eglot]] is a built-in Emacs client for LSP servers.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    ((python-ts-mode . eglot-ensure)
     (c-ts-mode . eglot-ensure)
     (rust-ts-mode . eglot-ensure)
     (nix-ts-mode . eglot-ensure)))
#+end_src


** Tree-Sitter
Configure Tree-sitter for improved syntax highlighting.

#+begin_src emacs-lisp
  ;; define sources
  (setq treesit-language-source-alist
        '((rust "https://github.com/tree-sitter/tree-sitter-rust")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (nix "https://github.com/nix-community/tree-sitter-nix")))

  ;; remap modes to use tss mode
  (setq major-mode-remap-alist
        '(;(c-mode . c-ts-mode)
          (sh-mode . bash-ts-mode)
          (python-mode . python-ts-mode)))

  ;; Set treesit-font-lock-level to 4
  (setq treesit-font-lock-level 4)
#+end_src

*** C
Enable Tree-sitter support for C.

#+begin_src emacs-lisp
  (use-package c-ts-mode
    :mode "\\.c\\'")
#+end_src

*** Nix
Enable Tree-sitter support for Nix.

#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :mode "\\.nix\\'")
#+end_src

*** Rust
Enable Tree-sitter support for Rust.

#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs\\'")
#+end_src

*** YAML
Enable Tree-sitter support for YAML.

#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :mode "\\.yaml\\'")
#+end_src

** Company
[[https://github.com/company-mode/company-mode][Company]] is a text-completion framework for Emacs.

#+begin_src emacs-lisp
  (use-package company
    :after eglot
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    ;; (company-show-numbers t)
    (company-tooltip-align-annotations t)
    (global-company-mode t))

   (use-package company-box
     :after company
     :hook (company-mode . company-box-mode))
#+end_src

* EDIFF
=ediff= is a diff program that is built into Emacs. By default, =ediff= splits files vertically and places the =help= frame in its own window.
This configuration changes this so the two files are splithorizontally and the =help= frame appears as a lower split within the existing window.
Also, the function =my-ediff-hook= sets keys =n= and =e= (vim keys for ~colemak-dh~) for moving to =next= and =prev= diffs. By default, this is set
to =n= and =p=.

#+begin_quote
code stolen from [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.org][distrotube's repo]]
#+end_quote

#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)

  (defun my-ediff-hook ()
    (ediff-setup-keymap)
    (define-key ediff-mode-map "n" 'ediff-next-difference)
    (define-key ediff-mode-map "e" 'ediff-previous-difference))

  (add-hook 'ediff-mode-hook 'my-ediff-hook)
#+end_src

* Org-mode
Settings related to Org mode.
** Enable Org-Mode
Enable Org-mode features and configuration.

#+begin_src emacs-lisp
  (use-package org
    :defer 0
    :config
    (setq org-list-allow-alphabetical t
          org-return-follows-link t
          org-fold-catch-invisible-edits 'show-and-error)

    ;; set directories
    (let ((default-directory "~/Documents/Org"))
      (setq org-directory (expand-file-name ".")
            org-agenda-directory (expand-file-name "Agenda")
            org-journal-dir (expand-file-name "journal")))

    ;; indent based on heading level
    (add-hook 'org-mode-hook 'org-indent-mode)
    (org-mode))
#+end_src

** Org-Agenda
Configure org-agenda for managing tasks and schedules.

#+begin_src emacs-lisp
  (use-package org-agenda
    :ensure nil
    :commands org-agenda
    :config
    (setq  org-agenda-files (list org-agenda-directory) ;; Tell emacs where to look for the agenda files
           org-agenda-start-with-log-mode t
           org-log-done 'time ;; Log time when a task is completed
           org-log-into-drawer t

           ;; Custom binding for agenda view
           org-agenda-custom-commands
           ;; Custom agenda view for daily tasks. This view displays all tasks scheduled for the current day,
           ;; with a separate heading for 'High Priority Tasks.'
           '(("d" "Daily Agenda"
              ((tags-todo "+PRIORITY=\"A\"+SCHEDULED<=\"<today>\""
                          ((org-agenda-overriding-header "High Priority Tasks")))
               (tags-todo "+DEADLINE<=\"<+10d>\""
                     ((org-agenda-overriding-header "Deadlines")))
               (todo "WAIT"
                     ((org-agenda-overriding-header "Tasks On Hold")))
               (todo "INPROGRESS"
                     ((org-agenda-overriding-header "Tasks in Progress")))
               (agenda " " ((org-agenda-span 'day)))))
             ;; Custom agenda for weekly review. This agenda displays all completed tasks from the current week,
             ;; as well as any unfinished tasks for review.
             ("w" "Weekly Review"
              ((agenda ""
                       ((org-agenda-overriding-header "Completed Tasks")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))
                        (org-agenda-span 'week)))
               (agenda ""
                       ((org-agenda-overriding-header "Unfinished Scheduled Tasks")
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                        (org-agenda-span 'week)))) ))))
#+end_src

** Org-Auto-Tangle
[[https://github.com/yilkalargaw/org-auto-tangle][Org-auto-tangle]] is a simple Emacs package that allows you to automatically tangle Org files on save by adding the option =#+auto_tangle:= t in your Org file.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Org-Capture
Set up org-capture for quick note-taking.

#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :commands org-capture
    :config
    (setq org-capture-templates
          `(("t" "Tasks/Projects")
            ("tt" "TASK" entry (file+olp ,(expand-file-name "todo.org" org-agenda-directory) "Inbox")
             "* TODO %? :%^{Tag}:\n %U\n %a\n %i" :empty-lines 1)

            ("tp" "PROJECTS" entry (file+olp ,(expand-file-name "todo.org" org-agenda-directory) "Inbox")
             "* PROJECT %? :%^{Tag}:\n %U\n %a\n %i" :empty-lines 1)

            ("ts" "STUDIES" entry (file+olp ,(expand-file-name "todo.org" org-agenda-directory) "Inbox")
             "* STUDIES %? :%^{Tag}:\n %U\n %a\n %i" :empty-lines 1)

            ("tr" "RESOURCES" item (file+olp "journal/resources.org" "Other Stuff")
             "- [[%^{link}][%^{description}]] - *%?*\n %i" :append t)

            ("td" "Cash" table-line (file+headline "journal/invoice.org" "Invoice")
             "| %U | %^{Category} | %^{Amount} | %^{Account} | %^{items} |" :kill-buffer t))))
#+end_src

** Org-Modern
[[https://github.com/minad/org-modern][Org-modern]] implements a modern style for your Org buffers using font locking and text properties.
The package styles headlines, keywords, tables and source blocks. The styling is configurable, you can
enable, disable or modify the style of each syntax element individually via the =org-modern= customization group.

#+begin_src emacs-lisp

  (use-package org-modern
    :hook
    (org-mode . org-modern-mode)
    :config
    (setq org-modern-star "replace"
          org-hide-emphasis-markers t
          org-modern-block-fringe nil
          org-modern-replace-stars "◉○◉○◉"
          org-modern-list '((?+ . "•") (?- . "•"))))
#+end_src


** Org-Tempo
[[https://github.com/dangom/org-mode/blob/master/lisp/org-tempo.el][Org-tempo]] is a module within Org that is disabled by default. =Org-tempo= allows for =<s= followed by =TAB= to expand to a =begin_src= tag.
Other expansions available include:

| Typing the below + TAB | Expands to …                        |
|------------------------+--------------------------------------|
| <a                     | =#+BEGIN_EXPORT ascii= … =#+END_EXPORT= |
| <C                     | =#+BEGIN_COMMENT= … =#+END_COMMENT=     |
| <e                     | =#+BEGIN_EXAMPLE= … =#+END_EXAMPLE=     |
| <E                     | =#+BEGIN_EXPORT= … =#+END_EXPORT=       |
| <h                     | =#+BEGIN_EXPORT html= … =#+END_EXPORT=  |
| <l                     | =#+BEGIN_EXPORT latex= … =#+END_EXPORT= |
| <q                     | =#+BEGIN_QUOTE= … =#+END_QUOTE=         |
| <s                     | =#+BEGIN_SRC= … =#+END_SRC=             |
| <v                     | =#+BEGIN_VERSE= … =#+END_VERSE=         |


#+begin_src emacs-lisp
    (require 'org-tempo)
#+end_src

** Org TODO
Define additional TODO words for Org mode.

#+begin_src emacs-lisp
  (setq
   org-todo-keywords
   '((sequence
      "TODO(t)"          ; day to day tasks
      "PROJECT(p)"       ; Personal projects
      "INPROGRESS(i)"    ; Tasks that are in progress
      "WAIT(w)"          ; Tasks that are currently on hold
      "STUDIES(s)"       ; study related
      "|"                ; The pipe necessary to separate "active" states and "inactive" states
      "DONE(d)"          ; Task has been completed
      "CANCELLED(c)")))  ; Task has been cancelled
#+end_src


** Extra-Config
Add extra configurations for Org mode.

#+begin_src emacs-lisp
  ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
  ;; Otherwise, org-tempo is broken when you try to <s TAB...
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

  (custom-set-faces
   '(org-code ((t (:foreground "#89dceb" :background: nil :slant italic :weight bold))))
   '(org-verbatim ((t (:foreground "#f38ba8" :background: nil :slant italic :weight bold))))
   '(org-agenda-deadline ((t (:foreground "#f38ba8" :background nil :weight bold))))
   '(org-agenda-priority ((t (:foreground "#f38ba8" :weight bold)))))


  ;; A function to extract all the links inside an org file
  (defun my/org-extract-links ()
    "Extract all links from the current Org buffer and copy them to the clipboard."
    (interactive)
    (let ((links (org-element-map (org-element-parse-buffer) 'link
                   (lambda (link) (org-element-property :raw-link link)))))
      (if links
          (progn
            (kill-new (mapconcat 'identity links "\n"))
            (message "Copied %d links to clipboard." (length links)))
        (message "No links found."))))
#+end_src

* Dired
Configure =dired=, a built-in file manager for Emacs.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config
    (setq wdired-allow-to-change-permissions 'advanced
          dired-listing-switches "-aL"
          dired-kill-when-opening-new-dired-buffer t
          )
    (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1))) ;; hide unnecessary details in dired mode by default
    )


  ;; Install dired open to open files in default applications
  (use-package dired-open
    :after dired evil-collection
    :config
    ;; Because evil collection will automatically translates 'Colemak-DH'
    ;; keybindngs to 'QWERTY' These keybindings are defined in
    ;; 'QWERTY' layout. Do not define them in 'Colemak-DH' layout.
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-open-file
      "D" 'dired-do-delete
      "p" 'dired-do-rename
      "m" 'dired-mark
      "u" 'dired-undo
      "i" 'dired-toggle-read-only
      "o" 'dired-open-xdg)
    (setq dired-open-extensions '(("gif" . "imv")
                                  ("jpg" . "imv")
                                  ("jpeg" . "imv")
                                  ("png" . "imv")
                                  ("mp4" . "mpv")
                                  ("mp3" . "mpv")
                                  ("mkv" . "mpv")
                                  ("pdf" . "firefox"))))
#+end_src

Automatically refresh =dired= buffers when files get added or deleted from the directory currently browsing.

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+end_src

* Theme
Settings related to visual themes.

** Catppuccin-Theme
Set the =Catppuccin theme= as the default theme.

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin t))
#+end_src

** Doom-Theme
Install the =Doom themes= packages.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;   ;; set default theme to load
    ;;   (load-theme 'doom-tokyo-night t)
    ;;   ;; Corrects (and improves) org-mode's native fontification.
    ;;   (doom-themes-org-config)
    )

#+end_src

** Modeline
Replace the default modeline with [[https://github.com/seagle0128/doom-modeline][Doom Modeline]].

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 30       ;; sets modeline height
          doom-modeline-bar-width 5     ;; sets right bar width
          doom-modeline-persp-name t    ;; sets perspective name to modeline
          doom-mode-line-persp-icon t)) ;; adds folder icon next to perspective name
#+end_src

* Packages
List of external packages for enhanced functionality.

** Direnv
This package provides [[https://direnv.net/][direnv]] integration for Emacs.

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (setq direnv-always-show-summary nil)
    (direnv-mode))
#+end_src

** Drag Stuff
The [[https://github.com/rejeep/drag-stuff.el][Drag Stuff]] minor mode allows dragging text (words, regions, lines) with M-up, M-down, M-left, and M-right."

#+begin_src emacs-lisp
  (use-package drag-stuff
    :init
    (drag-stuff-global-mode)
    (drag-stuff-define-keys))
#+end_src


** Eat
[[https://codeberg.org/akib/emacs-eat][Eat]] (Emulate A Terminal) is a terminal emulator. It can run most (if not all) full-screen terminal programs, including Emacs.

#+begin_src emacs-lisp
  (use-package eat
    :commands eat)
#+end_src

** Evil-Mc
[[https://github.com/gabesoft/evil-mc][Evil-mc]] is a multiple cursors implementation for Evil mode.

#+begin_src emacs-lisp
  (use-package evil-mc
    :after evil)
#+end_src

** Evil Mode
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vim layer for Emacs.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; For evil-collection
    (setq evil-want-vsplit-window-right t)
    (setq evil-want-split-window-below t)

    :config
    ;; Change q and wq to kill buffers instead of emacs
    (evil-ex-define-cmd "q" 'kill-current-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
    (defun save-and-kill-this-buffer()(interactive)(save-buffer)(kill-current-buffer))

    (evil-set-undo-system 'undo-tree)

    ;; Default to insert mode on these buffers
    (evil-set-initial-state 'eat-mode 'insert)
    (evil-set-initial-state 'vterm-mode 'insert)

    (evil-mode))


  (use-package evil-collection
    :after evil
    :config
    ;; This function will automatically translates 'Colemak-DH' keys
    ;; to 'QWERTY' layout.
    (defun my-hjkl-rotation (_mode mode-keymaps &rest _rest)
      (evil-collection-translate-key 'normal mode-keymaps
        "m" "h"
        "h" "m"
        "n" "j"
        "e" "k"
        "i" "l"
        ";" "p"
        "c" "x"
        "s" "d"
        "S" "D"
        "d" "c"
        "l" "u"
        "u" "i"))

    ;; Called after evil-collection makes its keybindings
    (add-hook 'evil-collection-setup-hook #'my-hjkl-rotation)
    (setq evil-collection-mode-list '(dashboard eww dired vterm ibuffer agenda help))
    (evil-collection-init))
    #+end_src

*** keybindings for colemak-dh
I have configured Evil keybindings to support =Colemak-DH=.

**** All Modes
Keybindngs specific to all =vim= modes.

#+begin_src emacs-lisp
  (evil-define-key '(motion normal visual) 'global "n" 'evil-next-visual-line)
  (evil-define-key '(motion normal visual) 'global "e" 'evil-previous-visual-line)
  (evil-define-key '(normal motion visual) 'global "i" 'evil-forward-char)
  (evil-define-key '(motion normal visual) 'global "m" 'evil-backward-char)
  (evil-define-key '(motion normal) 'global "j" 'evil-yank)
  (evil-define-key '(motion normal) 'global "J" 'evil-yank-line)
  (evil-define-key '(motion normal) 'global ";" 'evil-paste-after)
  (evil-define-key '(motion normal) 'global ":" 'evil-paste-before)
  (evil-define-key '(motion normal visual) 'global "O" 'evil-ex)
  (evil-define-key '(motion normal) 'global "k" 'evil-search-next)
  (evil-define-key '(motion normal) 'global "K" 'evil-search-previous)
#+end_src

**** Normal-Mode
Keybindings specific to =vim= Normal mode.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "U" 'evil-insert-line)
  (define-key evil-normal-state-map "u" 'evil-insert)
  (define-key evil-normal-state-map "y" 'evil-open-below)
  (define-key evil-normal-state-map "Y" 'evil-open-above)
  (define-key evil-normal-state-map "p" 'evil-replace)
  (define-key evil-normal-state-map "P" 'evil-enter-replace-state)
  (define-key evil-normal-state-map "c" 'evil-delete-char)
  (define-key evil-normal-state-map "C" 'evil-delete-backward-char)
  (define-key evil-normal-state-map "s" 'evil-delete)
  (define-key evil-normal-state-map "S" 'evil-delete-line)
  (define-key evil-normal-state-map "d" 'evil-change)
  (define-key evil-normal-state-map "D" 'evil-change-line)
  (define-key evil-normal-state-map "x" 'evil-toggle-fold)

  ;; undo
  (define-key evil-normal-state-map "l" 'evil-undo)
  (define-key evil-normal-state-map "\C-p" 'evil-redo)
#+end_src

**** Visual-Mode
Keybindings specific to =vim= Visual mode.

#+begin_src emacs-lisp
  (define-key evil-visual-state-map (kbd "l") 'evil-downcase)
  (define-key evil-visual-state-map (kbd "L") 'evil-upcase)
  (define-key evil-visual-state-map (kbd "u") 'evil-insert)
  (define-key evil-visual-state-map (kbd "u")  evil-inner-text-objects-map)
#+end_src

**** Motion
Keybindings specific to =vim= motions.

#+begin_src emacs-lisp
  (define-key evil-motion-state-map "z" 'evil-backward-word-begin)
  (define-key evil-motion-state-map "Z" 'evil-backward-word-begin)
  (define-key evil-motion-state-map "f" 'evil-forward-word-end)
  (define-key evil-motion-state-map "F" 'evil-forward-word-end)
  (define-key evil-motion-state-map "t" 'evil-find-char)
  (define-key evil-motion-state-map "T" 'evil-find-char-backward)
#+end_src

**** Window Management
Keybindings for window management.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "M" 'evil-window-left)
  (define-key evil-normal-state-map "I" 'evil-window-right)
  (define-key evil-normal-state-map "N" 'evil-window-down)
  (define-key evil-normal-state-map "E" 'evil-window-up)
  (define-key evil-normal-state-map "H" 'evil-window-split)
  (define-key evil-normal-state-map "R" 'evil-window-vsplit)
#+end_src

**** Comment or Uncomment
Keybinding for commenting/uncommenting lines.

#+begin_src emacs-lisp
  (define-key evil-visual-state-map "gd" 'comment-or-uncomment-region)
  (define-key evil-normal-state-map "gd" 'comment-line)
#+end_src

**** Operator-Pending-State
Keybindings specific to operator-pending-state.

#+begin_src emacs-lisp
  (define-key evil-operator-state-map "i" nil)
  (define-key evil-operator-state-map "u" evil-inner-text-objects-map)
#+end_src

**** Disable specific keybindigs.

#+begin_src emacs-lisp
  (define-key evil-normal-state-map "z" nil)
  (define-key evil-normal-state-map "Z" nil)

  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil)
#+end_src

** General
[[https://github.com/noctuid/general.el][General]] simplifies keybinding in Emacs for both evil and non-evil users.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer leader-key
      :states 'normal
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    (leader-key
      "." 'find-file
      "n" 'previous-buffer
      "e" 'next-buffer
      "u" 'ibuffer
      "l" 'undo-tree-visualize
      "f" 'eval-region
      "a" 'async-shell-command
      "q" 'evil-quit
      "w" 'kill-buffer
      "x" 'multi-vterm-dedicated-toggle
      "b" 'vterm
      "RET" 'evil-toggle-fold
      "p" 'recentf-open-files
      "m" 'eldoc-box-help-at-point
      "t" 'compile
      "r" 'maximize-window
      "s" '(lambda () (interactive) (dired "."))
      "i" '(lambda () (interactive) (load-file "~/.config/emacs/init.el"))
      "d" '(lambda () (interactive) (find-file "~/.config/nixconfig/docs/emacs-config.org"))
      "k" '(lambda () (interactive) (find-file "~/Documents/Org/journal/index.org"))

      ;; org
      "y a" 'org-agenda
      "y d" 'org-capture
      "y j" 'my/org-extract-links

      ;;perspective config
      "; r" 'persp-switch
      "; e" 'persp-kill
      "1" '(lambda () (interactive) (persp-switch-by-number 1))
      "2" '(lambda () (interactive) (persp-switch-by-number 2))
      "3" '(lambda () (interactive) (persp-switch-by-number 3))
      "4" '(lambda () (interactive) (persp-switch-by-number 4))
      "5" '(lambda () (interactive) (persp-switch-by-number 5))
      "6" '(lambda () (interactive) (persp-switch-by-number 6))
      "SPC" 'smex))
#+end_src

** Indent-bars
[[https://github.com/jdtsmith/indent-bars][Indent-bars]] provides indentation guide bars in Emacs, with optional tree-sitter enhancement.

#+begin_src emacs-lisp
  (use-package indent-bars
    :hook ((prog-mode) . indent-bars-mode)
    :config
    (setq
     indent-bars-color '(highlight :face-bg t :blend 0.2)
     indent-bars-pattern "."
     indent-bars-width-frac 0.1
     indent-bars-pad-frac 0.1
     indent-bars-zigzag nil
     indent-bars-color-by-depth nil
     indent-bars-highlight-current-depth nil
     indent-bars-display-on-blank-lines nil))
#+end_src

** Nerd Icons
[[https://github.com/rainstormstudio/nerd-icons.el][Nerd-icons]] is a library for easily using [[https://github.com/ryanoasis/nerd-fonts][Nerd Font]] icons inside Emacs. It works on both GUI and terminal.

#+begin_src emacs-lisp
  (use-package nerd-icons
    :config
    (setq nerd-icons-font-family "Iosevka Nerd Font"))

  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

** PDF
[[https://github.com/vedang/pdf-tools][pdf-tools]] allows viewing PDF files within Emacs using the [[https://poppler.freedesktop.org/][Poppler]] library, enabling modifications as well.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("n" . pdf-view-next-line-or-next-page)
                ("e" . pdf-view-previous-line-or-previous-page)
                ("C-=" . pdf-view-enlarge)
                ("C--" . pdf-view-shrink))
    :init
    (pdf-loader-install)
    :config (add-to-list 'revert-without-query ".pdf"))
#+end_src

** Perspective
[[https://github.com/nex3/perspective-el][Perspective]] enables multiple named workspaces in Emacs, akin to multiple desktops in window managers.

#+begin_quote
Code stolen from [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.org][distrotube's repo]].
#+end_quote

#+begin_src emacs-lisp
  (use-package perspective
    :custom
    ;;disable warning message for not setting persp-mode-prefix-key
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    (setq persp-state-default-file "~/.config/emacs/sessions"))

  ;;group buffers by persp-name in ibuffer
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+end_src

** Popper
[[https://github.com/karthink/popper][Popper]] is an Emacs minor-mode to summon and dismiss buffers easily.

#+begin_src emacs-lisp
  (use-package popper
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode))
    :config
    (popper-mode +1)

    (when (bound-and-true-p
           popper-echo-mode)
      (popper-echo-mode +1)))  ; For echo area hints
    #+end_src

** Rainbow Delimiters
Adds rainbow colors to parentheses and brackets.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src

** Rainbow-Mode
Displays the actual color as a background for any hex color value. This code block enables rainbow-mode
in all programming modes (prog-mode) as well as org-mode.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode
    :config
    (rainbow-mode)
    )
#+end_src

** Sideline
[[https://github.com/emacs-sideline/sideline][Sideline]] is a library that provides the frontend UI to display information either on the left/right side of the buffer window.

#+begin_src emacs-lisp
  (use-package sideline
    :hook (eglot-managed-mode . sideline-mode))

#+end_src

*** Sideline-Flymake
[[https://github.com/emacs-sideline/sideline-flymake][Sideline-flymake]] displays error messages similarly to how VS Code does, using [[https://github.com/emacs-sideline/sideline][Sideline]].

#+begin_src emacs-lisp
  ;;shows errors like vs code using sideline
  (use-package sideline-flymake
    :after sideline)
  (setq sideline-backends-skip-current-line t
        sideline-order-left 'down
        sideline-order-right 'up
        sideline-format-left "%s   "
        sideline-format-right "   %s"
        sideline-priority 100
        sideline-display-backend-name t
        sideline-backends-right '((sideline-flymake)
                                  (sideline-blame . down)))
#+end_src

*** Sideline-Blame
[[https://github.com/emacs-sideline/sideline-blame][Sideline-blame]] shows git blame messages alongside your code using [[https://github.com/emacs-sideline/sideline][Sideline]].

#+begin_src emacs-lisp
  ;; show git logs using sideline
  (use-package sideline-blame
    :after sideline)
#+end_src

** SLY
[[https://github.com/joaotavora/sly][SLY]] is a Common Lisp IDE for Emacs.

#+begin_src emacs-lisp
  (use-package sly)
#+end_src

** Smex
[[https://github.com/nonsequitur/smex][Smex]] is a M-x enhancement for Emacs. Built on top of Ido, it provides a convenient interface to your recently
and most frequently used commands. And to all the other commands, too.

#+begin_src emacs-lisp
  (use-package smex)
#+end_src

** TLDR
[[https://github.com/tldr-pages/tldr][tldr]] client for accessing TLDR pages directly within Emacs.

#+begin_src emacs-lisp
  (use-package tldr
    :commands tldr)
#+end_src

** TOC-Org
[[https://github.com/snosov1/toc-org][Toc-org]] is an Emacs utility that maintains an up-to-date table of contents in org files without the need for exporting, useful primarily for README files.

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :hook (org-mode . toc-org-mode))
#+end_src

** Treemacs
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a tree layout file explorer for Emacs.

#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

** Undo Tree
[[https://gitlab.com/tsc25/undo-tree][Undo tree]] replaces Emacs undo system with a system that treats undo history as a branching tree of changes.

#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-autosave-history nil)
    (setq undo-tree-history-directory-alist '(("." . "~/.local/share/emacs-backup/undo"))))
#+end_src

** Vterm
[[https://github.com/akermu/emacs-libvterm][Vterm]] is a terminal emulator inside Emacs based on [[https://github.com/neovim/libvterm][libvterm]], a C library.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm)
#+end_src

*** Multi-Vterm
[[https://github.com/suonlight/multi-vterm][Multi-vterm]] helps to manage multiple =vterm= buffers inside Emacs.

#+begin_src emacs-lisp
  (use-package multi-vterm
    :config
    (setq multi-vterm-dedicated-window-height-percent 50))
#+end_src
